syntax = "proto3";

/* 
 * loginRequest is send to player after connection.
*/

message loginRequest {
    string name = 1;           // Server's name
    int32 protocol = 2;
	int32 maxplayers = 3;
	int32 numberplayers = 4;
	string motd = 5;
	string software = 6;
}


/* 
 * loginSuccess is send after successful login.
 * x/y/z_pos corresponds player's position
 * items/blocks/blockIds_def are stringified copies of servers block/item registry
 * inventory is stringified copy of player's inventory object
*/

message loginSuccess {
    double x_pos = 1;
    double y_pos = 2;
    double z_pos = 3;
    string items_def = 4;
    string blocks_def = 5;
    string inventory = 6;
}

/* 
 * playerEntity is send to make client ignore actions of player's entity
*/

message playerEntity {
    string uuid = 1;
}

/* 
 * playerTeleport should be send after teleportation.
 * x, y and z corresponds player's new position
*/

message playerTeleport {
    double x = 1;
    double y = 2;
    double z = 3;
}

/* 
 * playerInventory updates entire inventory of player.
 * inventory contains stringified copy of player's inventory objecyt
*/

message playerInventory {
	string inventory = 1;
}

/* 
 * playerSlotUpdate updates specific slot of inventory.
 * data is an stringified copy of item.
*/

message playerSlotUpdate {
	int32 slot = 1;

	enum SlotType {
		MAIN = 0;
		TEMP = 1;
		HOOK = 2;
	}

    string type = 2;
    string data = 3;
}

/* 
 * playerMovementChange updates player's movement (noa) values.
*/

message playerMovementChange {
    string key = 1;
    double value = 2;
}

/* 
 * playerKick is used to set reason of connection close
*/

message playerKick {
    string reason = 1;
}

/* 
 * soundPlay plays sound for player
 * sound is sounds location, volume is volume (max 100)
 * x, y, z are used for setting location of this sound
*/

message soundPlay {
    string sound = 1;
    int32 volume = 2;
    double x = 3;
    double y = 4;
    double z = 5;
}

/* 
 * chatMessege adds new message on player's chat
*/

message chatMessage {
    string message = 1;
}

/* 
 * tabUpdate updates tab...
*/

message tabUpdate {
    string message = 1;
}

/* 
 * entityCreate creates new entity.
 * uuid is entity's id, data is stringifid version of entity's object
*/

message entityCreate {
    string uuid = 1;
    string data = 2;
}

/* 
 * entityRemove removes entity
*/

message entityRemove {
    string uuid = 1;
}

/* 
 * entityMove moves and rotates entity
*/

message entityMove {
    string uuid = 1;
    double x = 2;
    double y = 3;
    double z = 4;
    float rotation = 5;
}

/* 
 * worldBlockUpdate changes block at x, y, z to block with id id
*/

message worldBlockUpdate {
    int32 x = 1;
    int32 y = 2;
    int32 z = 3;
    uint32 id = 4;
}

/* 
 * worldChunk updates chunk for player. 
 * x and z changes chunk's location. Data is buffer with all blocks
*/

message worldChunk {
    int32 x = 1;
    int32 z = 2;
    bytes data = 3;
}